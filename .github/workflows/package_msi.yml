name: Build and Package JavaFX App for Windows

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 1: Set up JDK 21 using actions/setup-java
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'microsoft'
          java-version: '21'

      # Step 2: Install JavaFX 21 locally in a specified directory
      - name: Install JavaFX 21
        run: |
          # Download JavaFX SDK
          Invoke-WebRequest -Uri https://download2.gluonhq.com/openjfx/23.0.1/openjfx-23.0.1_windows-x64_bin-sdk.zip -OutFile openjfx.zip
          
          # Create a local directory to extract JavaFX
          $javaFXDir = ".\\openjfx"
          New-Item -ItemType Directory -Force -Path $javaFXDir
          
          # Extract JavaFX to the local directory
          Expand-Archive openjfx.zip -DestinationPath $javaFXDir
          Get-ChildItem ".\openjfx\javafx-sdk-23.0.1"

      # Step 3: Create custom JRE using jlink
      - name: Create custom JRE using jlink
        run: |
          # Define directories
          $jdkBin = "$env:JAVA_HOME\bin"
          $javaFXLib = ".\openjfx\javafx-sdk-23.0.1\lib"
          $jlinkOutputDir = ".\jre"

          # Create a custom runtime image
          & "$jdkBin\jlink" --module-path "$env:JAVA_HOME\jmods;$javaFXLib" `
            --add-modules java.base,java.desktop,javafx.controls,javafx.fxml,javafx.web,javafx.media,javafx.swing `
            --output $jlinkOutputDir `
            --bind-services

          # Verify the JRE was created
          Get-ChildItem $jlinkOutputDir

      # Step 4: Build your app with Maven
      - name: Build with Maven
        run: mvn clean package

      # Step 5: Install Launch4j
      - name: Install Launch4j
        run: |
          # Install Launch4j using Chocolatey
          choco install launch4j

      # Step 6: Use Launch4j to wrap the JAR with the custom JRE
      # Step 6: Use Launch4j to wrap the JAR with the custom JRE
      - name: Create Windows .exe using Launch4j
        run: |
          # Find the path to Launch4j executable using Get-Command (equivalent of 'which')
          $launch4jExe = (Get-Command launch4j.exe).Source
          if (-Not $launch4jExe) {
              Write-Error "Launch4j executable not found in PATH."
              exit 1
          }

          $jarFile = "target\Pomodazzle-1.0-SNAPSHOT-jar-with-dependencies.jar"
          $jreDir = ".\jre"
          $outputExe = ".\package\Pomodazzle.exe"

          # Create the Launch4j configuration XML
          $launch4jConfig = @"
          <launch4jconfig>
            <outputFile>$outputExe</outputFile>
            <jar>$jarFile</jar>
            <jre>
              <path>$jreDir</path>
            </jre>
            <minJvmVersion>11</minJvmVersion>
            <maxJvmVersion>21</maxJvmVersion>
            <dontUseLaunch4jJre>false</dontUseLaunch4jJre>
          </launch4jconfig>
          "@

          # Write the configuration to a file
          $configFile = ".\launch4j_config.xml"
          $launch4jConfig | Out-File -FilePath $configFile

          # Run Launch4j with the configuration
          & $launch4jExe $configFile

          # Verify the .exe file is generated
          Get-ChildItem ".\package"
      

      # Step 7: Test the Generated .exe File
      - name: Test the Generated .exe File
        run: |
          $exePath = ".\package\Pomodazzle.exe"
          
          # Ensure the file exists
          if (-Not (Test-Path $exePath)) {
              throw "The generated .exe file does not exist at $exePath."
          }
          
          # If no arguments are supported, just run it
          & $exePath | Out-Null
          
          Write-Host "The .exe file executed successfully."
        shell: pwsh

      # Step 8: Upload the .exe File as an Artifact
      - name: Upload .exe Artifact
        uses: actions/upload-artifact@v3
        with:
          name: pomodazzle-package
          path: ./package/Pomodazzle.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
