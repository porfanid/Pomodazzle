name: Build and Package JavaFX App for Windows

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 1: Set up JDK 21 using actions/setup-java
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'microsoft'
          java-version: '21'

      # Step 2: Install JavaFX
      - name: Install JavaFX 21
        run: |
          Invoke-WebRequest -Uri https://github.com/openjfx/openjfx/releases/download/21/openjfx-21_windows-x64_bin-sdk.zip -OutFile openjfx.zip
          Expand-Archive openjfx.zip -DestinationPath $env:ProgramFiles\Java
          # Set JavaFX path as environment variable
          echo "JAVA_FX_HOME=$env:ProgramFiles\Java\openjfx-21" >> $env:GITHUB_ENV

      # Step 3: Build your app with Maven or Gradle
      # For example, use Maven if your project uses it
      - name: Build with Maven
        run: mvn clean package

      # Step 4: Use jpackage to create MSI installer
      - name: Create MSI installer using jpackage
        run: |
          $env:PATH="$env:PATH;$env:ProgramFiles\Java\openjfx-21\bin"
          jpackage --input target \
            --name Pomodazzle \
            --main-jar Pomodazzle-1.0-SNAPSHOT-jar-with-dependencies.jar \
            --main-class com.porfanid.pomodazzle.Pomodazzle \
            --module-path $env:ProgramFiles\Java\openjfx-21\lib \
            --add-modules javafx.controls,javafx.fxml,javafx.web \
            --type msi \
            --dest ./package/Pomodazzle \
            --win-dir-chooser \
            --win-menu \
            --win-shortcut

      # Step 5: Upload the MSI file as an artifact or release
      - name: Upload MSI to GitHub release
        uses: softprops/action-gh-release@v1
        with:
          files: ./package/Pomodazzle/pomodazzle_*.msi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
